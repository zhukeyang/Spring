<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="dao.StudentDao">
<!--    <select id="selectBlog" resultType="Blog">-->
<!--        select * from Blog where id = #{id}-->
<!--    </select>-->
<!--    查询一个学生Student
        <select>：表示查询操作，里面是查询语句
        id:要执行的SQL语句的唯一标识，是一个自定义的字符串
            推荐使用Dao接口中的方法名字
        resultType:告诉mybatis，执行SQL语句，把数据赋值给哪个类型的java语句
                    resultType的值现在使用java对象的全限定名称
                    和select一起用，有select就有resultType
-->
<!--    #{}表示占位符，接收从java传过来的数据-->
    <select id="selectStudentById" resultType="domain.Student">
        select id,name,email,age from student where id =#{studentId}
    </select>
    <insert id="insertStudent">
        insert into student values(#{id},#{name},#{email},#{age})
    </insert>
<!--
         如果传入的是一个java对象，那你可以使用#{属性名称} 获取此属性名
        属性值放到#{}占位符的位置,mybatis执行此属性对应的get()方法
        例如#{id}执行getId()
-->
</mapper>
<!--
   1.约束文件："http://mybatis.org/dtd/mybatis-3-mapper.dtd"
    作用：定义和限制当前文件中可以使用的标签和属性，以及标签出现的顺序

   2.mapper是根标签（必须有值，不能为空）
        namespace:命名空间（必须有值，不能为空。唯一值）
                  推荐使用Dao接口的全限定名称。
                    作用：参与识别SQL语句。

   3.在mapper里面可以写 <insert>,<update>等标签，（对应相应的SQL语句）
   <insert>里面是insert语句
   <update>里面是update语句
    标签出现的顺序和次数是没有限制的

-->